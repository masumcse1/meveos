{
	"info": {
		"_postman_id": "ae59a0dd-b5f7-4cfd-ada2-dd52a443fd78",
		"name": "Custom table inheritance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic usage",
			"item": [
				{
					"name": "Create parent template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"ParentTemplate\",\r\n    \"name\": \"ParentTemplate\",\r\n    \"description\": \"ParentTemplate\",\r\n    \"availableStorages\": [\r\n        \"SQL\"\r\n    ],\r\n    \"sqlStorageConfiguration\": {\r\n        \"storeAsTable\": true\r\n    },\r\n    \"fields\": [\r\n        {\r\n            \"code\": \"completed\",\r\n            \"description\": \"completed\",\r\n            \"fieldType\": \"BOOLEAN\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        },\r\n        {\r\n            \"code\": \"value\",\r\n            \"description\": \"value\",\r\n            \"fieldType\": \"STRING\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"ChildTemplate\",\r\n    \"name\": \"ChildTemplate\",\r\n    \"description\": \"ChildTemplate\",\r\n    \"superTemplate\": \"ParentTemplate\",\r\n    \"availableStorages\": [\r\n        \"SQL\"\r\n    ],\r\n    \"sqlStorageConfiguration\": {\r\n        \"storeAsTable\": true\r\n    },\r\n    \"fields\": [\r\n        {\r\n            \"code\": \"description\",\r\n            \"description\": \"description\",\r\n            \"fieldType\": \"STRING\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data in child table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask\",\n            \"description\": \"My first task\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve inserted data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.description).to.eql(\"My first task\");\r",
									"    pm.expect(jsonData.completed).to.eql(false);\r",
									"    pm.expect(jsonData.value).to.eql(\"FirstTask\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"completed\": true,\r\n    \"value\": \"FirstTaskUpdated\",\r\n    \"description\": \"My first task updated\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve updated data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.description).to.eql(\"My first task updated\");\r",
									"    pm.expect(jsonData.completed).to.eql(true);\r",
									"    pm.expect(jsonData.value).to.eql(\"FirstTaskUpdated\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove row in parent table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ParentTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check child row has been deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data in child table 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask\",\n            \"description\": \"My first task\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove row in child table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check parent row has been deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/:uuid",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								":uuid"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ParentTemplate"
								},
								{
									"key": "uuid",
									"value": "{{uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask1\",\n            \"description\": \"My first task\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask2\",\n            \"description\": \"My first task\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data - no filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data - with filters on child table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filters\": { \r\n        \"description\": \"My first task\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data - with filters on parent table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filters\": { \r\n        \"value\": \"FirstTask1\",\r\n        \"completed\": false\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data - select parent field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fetchFields\": [\"value\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data - select child field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Json body matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fetchFields\": [\"description\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete child template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/entity/:template?withData=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"entity",
								":template"
							],
							"query": [
								{
									"key": "withData",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "template",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete parent template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/entity/:template?withData=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"entity",
								":template"
							],
							"query": [
								{
									"key": "withData",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "template",
									"value": "ParentTemplate"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Parent table has unique fields",
			"item": [
				{
					"name": "Create parent template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"ParentTemplate\",\r\n    \"name\": \"ParentTemplate\",\r\n    \"description\": \"ParentTemplate\",\r\n    \"availableStorages\": [\r\n        \"SQL\"\r\n    ],\r\n    \"sqlStorageConfiguration\": {\r\n        \"storeAsTable\": true\r\n    },\r\n    \"fields\": [\r\n        {\r\n            \"code\": \"completed\",\r\n            \"description\": \"completed\",\r\n            \"fieldType\": \"BOOLEAN\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        },\r\n        {\r\n            \"code\": \"value\",\r\n            \"description\": \"value\",\r\n            \"fieldType\": \"STRING\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"unique\": true,\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"ChildTemplate\",\r\n    \"name\": \"ChildTemplate\",\r\n    \"description\": \"ChildTemplate\",\r\n    \"superTemplate\": \"ParentTemplate\",\r\n    \"availableStorages\": [\r\n        \"SQL\"\r\n    ],\r\n    \"sqlStorageConfiguration\": {\r\n        \"storeAsTable\": true\r\n    },\r\n    \"fields\": [\r\n        {\r\n            \"code\": \"description\",\r\n            \"description\": \"description\",\r\n            \"fieldType\": \"STRING\",\r\n            \"storageType\": \"SINGLE\",\r\n            \"storages\": [\r\n                \"SQL\"\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data in child table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask\",\n            \"description\": \"My first task\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update data in child table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"uuid\", pm.response.json()[0].uuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"type\": \"ChildTemplate\",\n        \"name\": \"ChildTemplate\",\n        \"properties\": {\n            \"completed\" : false,\n            \"value\": \"FirstTask\",\n            \"description\": \"My first task 2\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Only one row with correct description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"\r",
									"    pm.expect(jsonData[0].description).to.eql(\"My first task 2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/:project/persistence/:cet/list",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								":project",
								"persistence",
								":cet",
								"list"
							],
							"variable": [
								{
									"key": "project",
									"value": "default"
								},
								{
									"key": "cet",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete child template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/entity/:template?withData=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"entity",
								":template"
							],
							"query": [
								{
									"key": "withData",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "template",
									"value": "ChildTemplate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete parent template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/{{webContext}}/api/rest/entityCustomization/entity/:template?withData=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"{{webContext}}",
								"api",
								"rest",
								"entityCustomization",
								"entity",
								":template"
							],
							"query": [
								{
									"key": "withData",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "template",
									"value": "ParentTemplate"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "*   Parent cet have a unique field\n*   We try to insert data in the child table multiple time with the unique field always being the same\n*   The row should be created on first call, and updated on second call"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{keycloakPassword}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{keycloakUsername}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}